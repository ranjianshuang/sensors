#pragma once

#define MAX_MES_COUNT  0x00000400 //节点信息表数组最大值 1024 个节点
#define MAX_RAND  0x0000000A //随机数范围 
//#define COMMU_DIS  5   //通信距离，单位米
#define MIN_DIS  10   //节点最少距离，单位米
#define EQUAL_DIS  5   //节点最少距离，单位米


#include <stdlib.h>
#include <iostream>
using namespace std;

/*
	结点结构体
*/ 
typedef struct Node
{
	int Id;			//Current node ID
	int Num;		//The relative position of the current node needs to be generated by this algorithm
	int Clock;		//时钟计数
	/*
	int Tag;		//Flag bit
		 0 No operation, normal receiving and contracting
		 1 When receiving the head node information for the first time, you need to calculate your own location and send the contract
		 2 When receiving new information with definite location (non head node), you need to judge and calculate your own location
		 3 Sync package received
		 4 Calculate relative position
	*/
	int Tag;		//当前待操作标志位
	bool Flag;		//节点表变化标志位,未使用
	/*
		为 0   表示初始化状态
		为 100 数据同步完成
	*/
	double Val;		//充当通讯标志位
	double Distance; //到第一个节点的距离，单位米

	int Rece_Node_Info[MAX_MES_COUNT][2];	//接收到的节点表信息表
	int Node_Stable[MAX_MES_COUNT];	//数据稳定测试数组
	int Node_List_Length;			//节点表个数 = 收到0的初始个数
	int Remain_Zero_Count;				//剩余 0 的个数
	int Send_Mes_Count;	//Total times of sending data
	int Rece_Mes_Count;	//Total number of data received
	
}Node;

/*
	function：Create a node array of i nodes  
			  Returns the first address pointer of the array
*/
Node * CreatNode(int i);

/*
	函数功能：休眠等待2s，最长发送周期
	休眠的意思是不发包，但是可以收到数据包并处理
*/
void Wait();

/*
	函数功能：收到更新包时，判断并计算当前位置
	返回 0 不做操作，继续等待
	返回 4 表示确定了自己的位置，需要发更新包
	注意：需要使用node->Tag 接收返回值
*/
int Calc_Position(Node * node);

/*
	function：Relevant information of printing node
*/
void Print_Info(Node * node);

/*
	函数功能：打印节点表的相关信息
	自己的Id 位置 表长 
	收到的id   0个数
*/
void Print_Rece_Node_Info(Node * node);
/*
	函数功能：判断是否继续发包
	返回 0 不做操作,正常收发包
	返回 5 表中所有位置为 0，且不在变化，停止发包
	返回 6 表中所有位置都已确定，停止发包，程序终止
	返回 7 需要同步 1 的个数 
	返回 8 通过 1 的个数计算当前位置
	注意：需要使用node->Tag 接收返回值
*/
int Stop_Send(Node * node);
/*
	函数功能：判断数据交换是否稳定
	返回 1 稳定
	返回 0 有变化
*/
int Stable(Node * node);

void testNode(Node * node);


